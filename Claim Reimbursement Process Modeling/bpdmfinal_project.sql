CREATE TABLE PROJECT_EMPLOYEES
(EMPLOYEE_ID NUMBER(10) CONSTRAINT EMP_EMPLOYEES PRIMARY KEY,
FIRST_NAME VARCHAR2(20) CONSTRAINT FNPE NOT NULL,
MIDDLE_NAME VARCHAR2(20) CONSTRAINT MNPE NOT NULL,
LAST_NAME VARCHAR2(20) CONSTRAINT LNPE NOT NULL,
EMAIL VARCHAR2(50) CONSTRAINT EPE NOT NULL,
CONTACT VARCHAR2(16),
ADDRESS_LINE_1 VARCHAR2(50),
ADDRESS_LINE_2 VARCHAR2(50),
CITY VARCHAR2(30),
ST VARCHAR2(20),
ZIP VARCHAR2 (20),
REIMBURSEMENT_MODE VARCHAR2(15) CONSTRAINT RMPE NOT NULL);

CREATE TABLE LOCATION
(LOCATION_ID NUMBER(10) CONSTRAINT LOC_LOCATION PRIMARY KEY,
CITY VARCHAR2(30) CONSTRAINT EMPLOYER_LOC NOT NULL);

CREATE TABLE VENDOR
(VENDOR_ID  NUMBER(10) CONSTRAINT ID_VENDOR PRIMARY KEY,
VENDOR_LAST_NAME VARCHAR2(25) CONSTRAINT NAME_NN_VENDOR NOT NULL);

DROP TABLE VENDOR_LOCATION;
CREATE TABLE VENDOR_LOCATION
(VENDOR_ID NUMBER(10) CONSTRAINT VENDOR_ID_FK REFERENCES VENDOR(VENDOR_ID),
LOCATION_ID NUMBER(10) CONSTRAINT LOCATION_ID_FK REFERENCES LOCATION(LOCATION_ID),
PRIMARY KEY(VENDOR_ID, LOCATION_ID));

CREATE TABLE FLIGHT_EXPENSE
(FLIGHT_ID NUMBER(10) CONSTRAINT FLGHT_EXP_PK PRIMARY KEY,
FLIGHT_CLASS VARCHAR2(15) CONSTRAINT FLGHT_CLS NOT NULL,
FLIGHT_FROM VARCHAR2(25) CONSTRAINT FLGHT_FRM NOT NULL,
FLIGHT_TO VARCHAR2(25) CONSTRAINT FLGHT_TO NOT NULL,
FLIGHT_MIN_COST NUMBER(8,2) CONSTRAINT FLGHT_MIN_COST NOT NULL,
FLIGHT_MAX_COST NUMBER(8,2) CONSTRAINT FLGHT_MAX_COST NOT NULL);


CREATE TABLE OTHER_EXPENSE
(EXPENSE_TYPE VARCHAR2(25) CONSTRAINT EXPNSE_TYPE_PK PRIMARY KEY,
EXPENSE_COST NUMBER(8,2) CONSTRAINT EXPNSE_COST NOT NULL);

CREATE TABLE FUTURE_EXPENSE_CALCULATOR
(REIMBURSE_FORM_NO VARCHAR2(20) CONSTRAINT RMBRSE_FORM_NO_PK PRIMARY KEY,
HOTEL_AMOUNT NUMBER(8,2),
HOTEL_CHECKIN DATE,
HOTEL_CHECKOUT DATE,
FOOD_AMOUNT NUMBER(6,2),
FOOD_DURATION NUMBER(2),
CAR_RENT_EXPENSE NUMBER (6,2),
CAR_RENT_DURATION NUMBER (2),
MISC_EXPENSE_AMOUNT NUMBER(6,2),
MISC_EXPENSE_DURATION NUMBER(2),
FLIGHT_EXPENSE_AMOUNT NUMBER (8,2),
FLIGHT_FROM VARCHAR2(25),
FLIGHT_TO VARCHAR2(25),
FLIGHT_CLASS VARCHAR2(20),
EMPLOYEE_ID NUMBER(25) CONSTRAINT EMP_ID_FK REFERENCES PROJECT_EMPLOYEES(EMPLOYEE_ID));

DROP TABLE FUTURE_EXPENSE_CALCULATOR;
ALTER TABLE PROJECT_EMPLOYEES
ADD VENDOR_ID NUMBER(10) CONSTRAINT VENDOR_ID_EMPLOYEES_FK REFERENCES VENDOR(VENDOR_ID);
ALTER TABLE PROJECT_EMPLOYEES
ADD LOCATION_ID NUMBER(10) CONSTRAINT LOCATION_ID_EMPLOYEES_FK NOT NULL REFERENCES LOCATION(LOCATION_ID);
ALTER TABLE PROJECT_EMPLOYEES
ADD MANAGER_ID NUMBER(10) CONSTRAINT MANAGER_ID_FK REFERENCES PROJECT_EMPLOYEES(EMPLOYEE_ID);

-- Flight expense table has only five different options for flights for now. A query needs to be run
-- from any of the matched pair below and the mamimum value that should not be exceeded for
--any of these flight routes and flight class before the manager gets notified is in  the last column
INSERT INTO FLIGHT_EXPENSE VALUES(1001, 'BUSINESS', 'SAN FRANCISCO', 'DENVER', 1000, 5000);
INSERT INTO FLIGHT_EXPENSE VALUES(1002, 'BUSINESS', 'SAN JOSE', 'PORTLAND', 1500, 6000);
INSERT INTO FLIGHT_EXPENSE VALUES(1003, 'BUSINESS', 'SAN FRANCISCO', 'ATLANTA', 2000, 7500);
INSERT INTO FLIGHT_EXPENSE VALUES(1004, 'ECONOMY', 'SAN FRANCISCO', 'SAN JOSE', 150, 500);
INSERT INTO FLIGHT_EXPENSE VALUES(1005, 'ECONOMY', 'PLEASANTON', 'DENVER', 400, 1000);

-- the other expense table shows the maximum value allowed depending on the expense. 
-- If the limit is exceeded the manager recievees a notification of the specific expense/s limit the employee has exceeded
INSERT INTO OTHER_EXPENSE VALUES('HOTEL', 250);
INSERT INTO OTHER_EXPENSE VALUES('CAR_RENTAL', 200);
INSERT INTO OTHER_EXPENSE VALUES('FOOD', 100);
INSERT INTO OTHER_EXPENSE VALUES('MISC', 100);

-- The future expense calculator table stores every details of travel for every employee including the cost and duration
-- for every expense and the route and class of flights along with their employeeId's. 
-- The main purpose of this table is to identify the mimimum, maximum and average costs incurred for every kind of expense
-- so that the costs for  each of those type of expenses can be marginalized in order to estimate the limit allowed 
-- for each type of expense for the future.
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN100', 800, '10-may-2016', '14-may-2016', 300, 3, 200, 1, 50, 3, 1200, 'SAN FRANCISCO', 'DENVER', 'BUSINESS', 301);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN101', 1500, '15-may-2016', '18-may-2016', 1000, 5, 750, 3, 300, 5, 5000, 'SAN JOSE', 'PORTLAND', 'BUSINESS', 300);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN102', 400, '21-jan-2016', '23-jan-2016', 300, 4, 300, 4, 2000, 4, 5500, 'SAN FRANCISCO', 'ATLANTA', 'BUSINESS', 304);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN103', 600, '17-feb-2016', '14-feb-2016', 200, 3, 100, 3, 0, 3, 400, 'SAN FRANCISCO', 'SAN JOSE', 'ECONOMY', 308);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN109', 900, '05-dec-2015', '11-dec-2015', 340, 6, 400, 6, 0, 6, 550, 'SAN FRANCISCO', 'DENVER', 'ECONOMY', 305);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN105', 500, '17-aug-2014', '21-aug-2014', 150, 4, 300, 4, 150, 4, 450, 'SAN FRANCISCO', 'DENVER', 'ECONOMY', 300);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN106', 550, '29-july-2014', '03-aug-2014', 350, 5, 200, 5, 100, 5, 350, 'SAN FRANCISCO', 'DENVER', 'ECONOMY', 301);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN107', 470, '14-mar-2016', '19-mar-2016', 300, 4, 200, 4, 175, 4, 1200, 'PLEASANTON', 'DENVER', 'BUSINESS', 300);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN104', 1200, '02-oct-2015', '07-oct-2015', 500, 2, 1000, 2, 250, 2, 0, null, null, 'ECONOMY', 304);
INSERT INTO FUTURE_EXPENSE_CALCULATOR VALUES('FN108', 400, '03-sep-2014', '11-sep-2014', 150, 2, 100, 2, 50, 2, 1400, 'SAN FRANCISCO', 'DENVER', 'BUSINESS', 305);

-- the vendor table has 4 vendors. They provide contractors in six different locations in the location table
INSERT INTO VENDOR VALUES(101, 'Prokarma');
INSERT INTO VENDOR VALUES(102, 'ThoughtWorks');
INSERT INTO VENDOR VALUES(103, 'Cognizant');
INSERT INTO VENDOR VALUES(104, 'Perficient');

-- The employee table has 8 employees. they have the following attributes stored
--employeeId, firstname, middlename, lastname, email, phone, address(all variables), paymentMode, vendorId, locationId, managerId
INSERT INTO PROJECT_EMPLOYEES VALUES(300, 'Ashish', 'Kumar', 'Gupta', 'ashish.gupta@kp.org', '8604358275', '250 main apartments', 'apartment 303', 'pleasanton', 'california', '94566', 'check', null, 201, null);
INSERT INTO PROJECT_EMPLOYEES VALUES(301, 'Rajit', 'Neev', 'Podder', 'rajit.podder@kp.org', '9728385260', '100 oakwood avenue', null, 'pleasanton', 'california', '94566', 'check', null, 201, null);
INSERT INTO PROJECT_EMPLOYEES VALUES(302, 'Sydney', 'M', 'Stewart', 'sydney.stewart@kp.org', '4065497852', '105 grant chamberlain drive', 'apt - 3H', 'denver', 'colorado', '80123', 'paycheck', 101, 204, 300);
INSERT INTO PROJECT_EMPLOYEES VALUES(303, 'Kajori', 'N', 'Banerjee', 'kajori.banerjee@kp.org', '9725487653', '216 S Rusell street', null, 'atlanta', 'georgia', '30301', 'check', null, 206, null);
INSERT INTO PROJECT_EMPLOYEES VALUES(304, 'Emily', 'M', 'Albers', 'emily.albers@kp.org', '6726749007', '3533 vineyard avenue', null, 'pleasanton', 'california', '94566', 'check', 102, 201, 301);
INSERT INTO PROJECT_EMPLOYEES VALUES(305, 'Tina', 'S', 'Chatterjee', 'tina.chattterjee@kp.org', '6589540091', '2439 monroe chase court', null, 'san jose', 'california', '95101', 'paycheck', null, 203, null);
INSERT INTO PROJECT_EMPLOYEES VALUES(306, 'Emily', 'T', 'Wilkinson', 'emily.wilkinson@kp.org', '7328794431', '13 Rchardson Street', 'apt - 202', 'san francisco', 'california', '94102', 'check', 104, 202, 301);
INSERT INTO PROJECT_EMPLOYEES VALUES(307, 'Megan', 'R', 'Iams', 'megan.iams@kp.org', '2025078225', '3276 falcon avenue', null, 'portland', 'oregon', '97213', 'paycheck', 103, 205, null);
INSERT INTO PROJECT_EMPLOYEES VALUES(308, 'Marta', 'P', 'Bugowska', 'marta.bugowska@kp.org', '5659004211', '201 picasso street', null, 'san francisco', 'california', '94102', 'check', 103, 202, null);

-- creates a location table with six different location. The company only has employees 
--working and vendors contracting employees in these locations only
INSERT INTO LOCATION VALUES(201, 'Pleasanton'); 
INSERT INTO LOCATION VALUES(202, 'San Francisco');
INSERT INTO LOCATION VALUES(203, 'San Jose');
INSERT INTO LOCATION VALUES(204, 'Denver');
INSERT INTO LOCATION VALUES(205, 'Portland');
INSERT INTO LOCATION VALUES(206, 'Atlanta');

--------------------------------------------------------

SELECT REIMBURSE_FORM_NO,
CASE WHEN &FLIGHT_AMOUNT > (SELECT FLIGHT_MAX_COST FROM FLIGHT_EXPENSE WHERE FLIGHT_FROM = UPPER('&FLIGHT_FROM') AND 
FLIGHT_TO = UPPER('&FLIGHT_TO') AND FLIGHT_CLASS = UPPER('&FLIGHT_CLASS')) THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END FLIGHT_EXPENSE,
CASE WHEN &HOTEL_EXPENSE_AMOUNT > (SELECT EXPENSE_COST*((TO_DATE('&CHECKOUT_DATE_DD_mon_YYYY')) - (TO_DATE('&CHECKIN_DATE_DD_mon_YYYY'))) FROM OTHER_EXPENSE WHERE EXPENSE_TYPE = 'HOTEL') THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END HOTEL_EXPENSE,
CASE WHEN &CAR_RENTAL_AMOUNT > (SELECT EXPENSE_COST*(&CAR_RENTAL_DURATION) FROM OTHER_EXPENSE WHERE EXPENSE_TYPE = 'CAR_RENTAL') THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END CAR_RENTAL_EXPENSE,
CASE WHEN &FOOD_EXPENSE_AMOUNT > (SELECT EXPENSE_COST*(&FOOD_EXPENSE_DURATION) FROM OTHER_EXPENSE WHERE EXPENSE_TYPE = 'FOOD') THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END FOOD_EXPENSE,
CASE WHEN &MISC_EXPENSE_AMOUNT > (SELECT EXPENSE_COST*(&MISC_EXPENSE_DURATION) FROM OTHER_EXPENSE WHERE EXPENSE_TYPE = 'MISC')THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END MISC_EXPENSE,
CASE WHEN LOWER('&MANAGER_LAST_NAME') = LOWER((SELECT m.LAST_NAME FROM PROJECT_EMPLOYEES e JOIN PROJECT_EMPLOYEES m ON (e.MANAGER_ID = m.EMPLOYEE_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
AND LOWER('&MANAGER_FIRST_NAME') = LOWER((SELECT m.FIRST_NAME FROM PROJECT_EMPLOYEES e JOIN PROJECT_EMPLOYEES m ON (e.MANAGER_ID = m.EMPLOYEE_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
THEN 'CORRECT MANAGER' ELSE 'INCORRECT MANAGER' END MANAGER_MATCHED,
CASE WHEN LOWER('&VENDOR_NAME') <> LOWER((SELECT n.VENDOR_LAST_NAME FROM PROJECT_EMPLOYEES e JOIN VENDOR n ON (e.VENDOR_ID = n.VENDOR_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
THEN 'INCORRECT VENDOR' ELSE 'CORRECT VENDOR' END VENDOR_MATCHED
FROM FUTURE_EXPENSE_CALCULATOR
WHERE REIMBURSE_FORM_NO = UPPER('&REIMBURSEMENT_FORM_NUMBER');

SELECT CASE WHEN LOWER('&MANAGER_LAST_NAME') = LOWER((SELECT m.LAST_NAME FROM PROJECT_EMPLOYEES e JOIN PROJECT_EMPLOYEES m ON (e.MANAGER_ID = m.EMPLOYEE_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
AND LOWER('&MANAGER_FIRST_NAME') = LOWER((SELECT m.FIRST_NAME FROM PROJECT_EMPLOYEES e JOIN PROJECT_EMPLOYEES m ON (e.MANAGER_ID = m.EMPLOYEE_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
THEN 'CORRECT MANAGER' ELSE 'INCORRECT MANAGER' END MANAGER_MATCHED
FROM FUTURE_EXPENSE_CALCULATOR 
WHERE REIMBURSE_FORM_NO = UPPER('&REIMBURSEMENT_FORM_NUMBER');

CASE WHEN LOWER('&VENDOR_NAME') <> LOWER((SELECT n.VENDOR_LAST_NAME FROM PROJECT_EMPLOYEES e JOIN VENDOR n ON (e.VENDOR_ID = n.VENDOR_ID) WHERE LOWER('&EMPLOYEE_LAST_NAME') = LOWER(e.LAST_NAME) AND LOWER('&EMPLOYEE_FIRST_NAME') = LOWER(e.FIRST_NAME)))
THEN 'INCORRECT VENDOR' ELSE 'CORRECT VENDOR' END VENDOR_MATCHED
 

SELECT CASE WHEN &HOTEL_EXPENSE_AMOUNT > (SELECT EXPENSE_COST*((TO_DATE('&TO_DATE_DD_mon_YYYY')) - (TO_DATE('&FROM_DATE_DD_mon_YYYY'))) FROM OTHER_EXPENSE WHERE EXPENSE_TYPE = 'HOTEL') THEN 'LIMIT EXCEEDED' ELSE 'LIMIT NOT EXCEEDED' END HOTEL_EXPENSE
FROM FUTURE_EXPENSE_CALCULATOR 
WHERE REIMBURSE_FORM_NO = UPPER('&REIMBURSEMENT_FORM_NUMBER');

select sysdate - to_date('07-may-2016')
from dual;

SELECT FLIGHT_CLASS, ROUND(MAX(FLIGHT_EXPENSE_AMOUNT)) MAX_FLIGHT_EXPENSE, ROUND(MIN(FLIGHT_EXPENSE_AMOUNT)) MIN_FLIGHT_EXPENSE, ROUND(AVG(FLIGHT_EXPENSE_AMOUNT)) AVG_FLIGHT_EXPENSE, 
ROUND(SUM(FLIGHT_EXPENSE_AMOUNT)) SUM_FLIGHT_EXPENSE FROM FUTURE_EXPENSE_CALCULATOR 
WHERE LOWER(FLIGHT_FROM) = LOWER('&FLIGHT_FROM') AND LOWER(FLIGHT_TO) =  LOWER('&FLIGHT_TO') GROUP BY FLIGHT_CLASS;  
